#!/usr/bin/env bash -e

# Usage:
# Run the service in the local environment:  ./Scripts/run
# Run the service inside a Docker container: ./Scripts/run -s
# Run the service inside a Docker container: ./Scripts/run --in-sandbox
# Run only the web service:                  ./Scripts/run --webservice
# Run only the onboarding agent:             ./Scripts/run --onboarding
# Show how to use this script:               ./Scripts/run -h
# Show how to use this script:               ./Scripts/run --help

# Debug|Release
CONFIGURATION=Release

APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/"
source "$APP_HOME/Scripts/.functions.sh"

# Folder where PCS sandboxes cache data. Reuse the same folder to speed up the
# sandbox and to save disk space.
# Use PCS_CACHE="$APP_HOME/.cache" to cache inside the project folder
PCS_CACHE="/tmp/azure/iotpcs/.cache"

help() {
    echo "Usage:"
    echo "  Run the service in the local environment:  ./Scripts/run"
    echo "  Run the service inside a Docker container: ./Scripts/run -s|--in-sandbox"
    echo "  Run only the web service:                  ./Scripts/run --webservice"
    echo "  Run only the onboarding agent:             ./Scripts/run --onboarding"
    echo "  Show how to use this script:               ./Scripts/run -h|--help"
}

prepare_for_run() {
    check_dependency_dotnet
    cd $APP_HOME
    ./Scripts/env-vars-check
    dotnet restore --verbosity=quiet
}

run_all() {
    echo "Starting OPC Twin..."
    dotnet run --configuration $CONFIGURATION --project WebService/*.csproj & \
        dotnet run --configuration $CONFIGURATION --project Services.Onboarding/*.csproj && \
        fg
}

run_webservice() {
    echo "Starting OPC Twin web service..."
    dotnet run --configuration $CONFIGURATION --project WebService/*.csproj
}

run_onboarding() {
    echo "Starting Opc Twin Onboarding Agent..."
    dotnet run --configuration $CONFIGURATION --project Services.Onboarding/*.csproj
}

setup_sandbox_cache() {
    mkdir -p $PCS_CACHE/sandbox/.config
    mkdir -p $PCS_CACHE/sandbox/.dotnet
    mkdir -p $PCS_CACHE/sandbox/.nuget
    echo "Note: caching build files in $PCS_CACHE"
}

run_in_sandbox() {

    setup_sandbox_cache

    cd $APP_HOME

    # In Windows this script should use docker.exe, in which case
    # the parameters syntax is different, e.g. volumes path
    # (i.e. C:\path\path\... vs /c/path/path/...).
    set +e
    IS_WINDOWS=$(which cmd.exe)
    set -e
    if [[ -z "$IS_WINDOWS" ]]; then
        check_dependency_docker

        ./Scripts/env-vars-check

        # Some settings are used to connect to an external dependency,
        # e.g. Azure IoT Hub and IoT Hub Manager API.
        # Depending on which settings and which dependencies are needed,
        # edit the list of variables.
        docker run -it \
            -p 9042:9042 \
            -e "_HUB_CS=$_HUB_CS" \
            -e "_STORE_CS=$_STORE_CS" \
            -e "_EH_CS=$_EH_CS" \
            -v "$PCS_CACHE/sandbox/.config:/root/.config" \
            -v "$PCS_CACHE/sandbox/.dotnet:/root/.dotnet" \
            -v "$PCS_CACHE/sandbox/.nuget:/root/.nuget" \
            -v "$APP_HOME:/opt/code" \
            azureiotpcs/code-builder-dotnet:1.0-dotnetcore /opt/code/Scripts/run
    else
        # Note 'winpty' is required to provide a TTY to Docker
        echo "Launching cmd.exe /c winpty ..."
        cmd.exe /c "winpty .\Scripts\run.cmd --in-sandbox"
    fi
}

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help && set +e && exit 0
fi

if [[ "$1" == "--in-sandbox" || "$1" == "-s" ]]; then
    run_in_sandbox
elif [[ "$1" == "" ]]; then
    prepare_for_run
    run_all
elif [[ "$1" == "--webservice" ]]; then
    prepare_for_run
    run_webservice
elif [[ "$1" == "--onboarding" ]]; then
    prepare_for_run
    run_onboarding
fi

set +e
